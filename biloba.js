if (!window["_biloba"]) {
  let successResult = (s, guard) => s === void 0 || s === null ? { success: true } : { success: s, guard };
  let errorResult = (err) => {
    return { error: err };
  };
  let result = (res) => {
    return { success: true, result: res };
  };
  let selector = (s) => {
    if (typeof s == "string") {
      if (s.charAt(0) == "x") {
        return document.evaluate(s.slice(1), document, null, XPathResult.ANY_UNORDERED_NODE_TYPE, null).singleNodeValue;
      } else {
        return document.querySelector(s.slice(1));
      }
    }
    return s;
  };
  let selectorEach = (s) => {
    if (typeof s == "string") {
      if (s.charAt(0) == "x") {
        let xPathResult = document.evaluate(s.slice(1), document, null, XPathResult.UNORDERED_NODE_ITERATOR_TYPE, null);
        const nodes = [];
        for (let node = xPathResult.iterateNext(); node != null; node = xPathResult.iterateNext())
          nodes.push(node);
        return nodes;
      } else {
        return [...document.querySelectorAll(s.slice(1))];
      }
    }
    return s;
  };
  let one = (...chain) => (s, ...args2) => {
    let n2 = selector(s);
    let errAnnotation = typeof s == "string" ? ": " + s.slice(1) : "";
    if (!n2)
      return errorResult("could not find DOM element matching selector" + errAnnotation);
    for (let i = 0; i < chain.length - 1; i++) {
      let r = chain[i](n2, ...args2);
      if (!r.success)
        return !!r.error ? r : errorResult(r.guard + errAnnotation);
    }
    let result2 = chain[chain.length - 1](n2, ...args2);
    if (!!result2.error)
      result2.error = result2.error + errAnnotation;
    return result2;
  };
  let each = (cb) => (s, ...args2) => {
    let ns = selectorEach(s);
    let errAnnotation = typeof s == "string" ? ": " + s.slice(1) : "";
    let result2 = cb(ns, ...args2);
    if (!!result2.error)
      result2.error = result2.error + errAnnotation;
    return result2;
  };
  class Biloba {
    constructor() {
      this.exists = (s) => successResult(!!selector(s));
      this.count = each((ns) => result(ns.length));
      this.isVisible = one((n2) => successResult(n2.offsetWidth > 0 || n2.offsetHeight > 0 || n2.offsetParent != null, "DOM element is not visible"));
      this.isEnabled = one((n2) => successResult(!n2.disabled, "DOM element is not enabled"));
      this.click = one(this.isVisible, this.isEnabled, (n2) => successResult(n2.click()));
      this.clickEach = each((ns) => {
        ns.forEach((n2) => this.click(n2));
        return successResult();
      });
      this.getValue = one((n2) => {
        if (n2.type == "checkbox") {
          return result(n2.checked);
        } else if (n2.type == "radio") {
          let selected = [...document.querySelectorAll(`input[type="radio"][name="${n2.name}"]`)].find((o) => o.checked);
          if (!!selected)
            return result(selected.value);
          return result(null);
        } else if (n2.type == "select-multiple") {
          return result([...n2.selectedOptions].map((o) => o.value));
        }
        return result(n2.value);
      });
      this.setValue = one(this.isVisible, this.isEnabled, (n2, v) => {
        if (n2.type == "select-one" && !n2.querySelector(`[value="${v}"]`)) {
          return errorResult(`Select input does not have option with value "${v}"`);
        } else if (n2.type == "checkbox") {
          if (typeof v != "boolean")
            return errorResult("Checkboxes only accept boolean values");
          n2.focus();
          n2.checked = v;
          n2.blur();
        } else if (n2.type == "radio") {
          if (typeof v != "string")
            return errorResult("Radio inputs only accept string values");
          let o = document.querySelector(`input[type="radio"][name="${n2.name}"][value="${v}"]`);
          if (!o)
            return errorResult(`Radio input does not have option with value "${v}"`);
          if (!this.isVisible(o).success)
            return errorResult(`The "${v}" option is not visible`);
          if (!this.isEnabled(o).success)
            return errorResult(`The "${v}" option is not enabled`);
          o.focus();
          o.checked = true;
          o.blur();
          n2 = o;
        } else if (n2.type == "select-multiple") {
          if (!Array.isArray(v))
            return errorResult("Multi-select inputs only accept []string values");
          let options = [...n2.options];
          let optionsToSelect = [];
          for (let value of v) {
            let o = options.find((o2) => o2.value == value);
            if (!o)
              return errorResult(`The "${value}" option does not exist`);
            if (!this.isEnabled(o).success)
              return errorResult(`The "${value}" option is not enabled`);
            optionsToSelect.push(o);
          }
          options.forEach((o) => o.selected = false);
          optionsToSelect.forEach((o) => o.selected = true);
        } else {
          n2.focus();
          n2.value = v;
          n2.blur();
        }
        n2.dispatchEvent(new Event("input", { bubbles: true }));
        n2.dispatchEvent(new Event("change", { bubbles: true }));
        return successResult();
      });
      this.hasProperty = one((n2, p) => {
        let v = n2;
        for (const subP of p.split(".")) {
          if (!(subP in v))
            return successResult(false);
          v = v[subP];
        }
        return successResult(true);
      });
      this.eachHasProperty = each((ns, p) => ns.length == 0 ? successResult(false) : successResult(ns.every((n2) => this.hasProperty(n2, p).success)));
      this.getProperty = one((n2, p) => {
        let v = n2;
        for (const subP of p.split(".")) {
          if (!(subP in v))
            return result(null);
          v = v[subP];
        }
        if (v !== null && v !== void 0 && !Array.isArray(v) && typeof v == "object" && typeof v[Symbol.iterator] == "function") {
          v = Array.from(v);
        } else if (v instanceof DOMStringMap) {
          v = { ...v };
        }
        return result(v);
      });
      this.getPropertyForEach = each((ns, p) => result(ns.map((n2) => this.getProperty(n2, p).result)));
      this.getProperties = one((n2, ps) => result(ps.reduce((m, p) => {
        m[p] = this.getProperty(n2, p).result;
        return m;
      }, {})));
      this.getPropertiesForEach = each((ns, ps) => result(ns.map((n2) => this.getProperties(n2, ps).result)));
      this.setProperty = one((n2, p, v) => {
        p = p.split(".");
        for (const subP of p.slice(0, -1)) {
          if (!(subP in n2))
            return errorResult(`could not resolve property component ".${subP}"`);
          n2 = n2[subP];
        }
        n2[p[p.length - 1]] = v;
        return successResult();
      });
      this.setPropertyForEach = each((ns, p, v) => {
        for (const n2 of ns) {
          let res = this.setProperty(n2, p, v);
          if (!res.success)
            return res;
        }
        return successResult();
      });
      this.invokeOn = one((n2, f, ...args2) => {
        if (!(f in n2) || typeof n2[f] != "function")
          return errorResult(`element does not implement "${f}"`);
        return result(n2[f](...args2));
      });
      this.invokeOnEach = each((ns, f, ...args2) => result(ns.map((n2) => this.invokeOn(n2, f, ...args2).result)));
      this.invokeWith = one((n, script, ...args) => result(eval(script)(n, ...args)));
      this.invokeWithEach = each((ns, script2, ...args2) => result(ns.map((n2) => this.invokeWith(n2, script2, ...args2).result)));
    }
  }
  window["_biloba"] = new Biloba();
}
//# sourceMappingURL=data:application/json;base64,
